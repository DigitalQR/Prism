using Prism.Parsing;
using Prism.Reflection.Tokens;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prism.Export
{
	public class ReflectionExporter
	{
		/// <summary>
		/// Header text which should be attached to every exported file
		/// </summary>
		private static string s_ExportHeader = @"///////////////////////////////////////////////////////////////////////////////////////////
/// This file contains auto-generated content as exported by the Prism content pipeline ///
///                                                                                     ///
/// DO NOT EDIT THIS FILE                                                               ///
///  Edit the original file and then re-run PrismTool to update this file               ///
///////////////////////////////////////////////////////////////////////////////////////////
";

		private FileToken m_FileToken;
		private ReflectionSettings m_Settings;

		public ReflectionExporter(FileToken file, ReflectionSettings settings)
		{
			m_FileToken = file;
			m_Settings = settings;
		}

		/// <summary>
		/// Gernerate all the content for the include
		/// </summary>
		public StringBuilder GenerateIncludeContent()
		{
			StringBuilder builder = new StringBuilder(s_ExportHeader);
			builder.Append(m_FileToken.GenerateIncludeContent(null));
			return ExpandMacros(builder);
		}

		/// <summary>
		/// Gernerate all the content for the source
		/// </summary>
		public StringBuilder GenerateSourceContent()
		{
			StringBuilder builder = new StringBuilder(s_ExportHeader);
			builder.Append(m_FileToken.GenerateImplementationContent(null));
			return ExpandMacros(builder);
		}
		
		/// <summary>
		/// Expand any macros relating to this type (Missing macros will be left)
		/// $(ClassReflectionToken)
		/// $(StructReflectionToken)
		/// $(EnumReflectionToken)
		/// $(VariableReflectionToken)
		/// </summary>
		/// <param name="input">The raw input string which should have it's macros replaced</param>
		/// <param name="prefix">The prefix to apply to every macro</param>
		/// <param name="suffix">The suffix to apply to each macro</param>
		/// <returns>The string with all relevent macros expanded</returns>
		public StringBuilder ExpandMacros(StringBuilder builder, string prefix = "", string suffix = "")
		{
			builder.Replace("$(" + prefix + "ClassReflectionToken" + suffix + ")", m_Settings.ClassToken);
			builder.Replace("$(" + prefix + "StructReflectionToken" + suffix + ")", m_Settings.StructToken);
			builder.Replace("$(" + prefix + "EnumReflectionToken" + suffix + ")", m_Settings.EnumToken);
			builder.Replace("$(" + prefix + "FunctionReflectionToken" + suffix + ")", m_Settings.FunctionToken);
			builder.Replace("$(" + prefix + "VariableReflectionToken" + suffix + ")", m_Settings.VariableToken);
			return builder;
		}
	}
}
